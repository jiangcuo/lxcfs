From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Wolfgang Bumiller <w.bumiller@proxmox.com>
Date: Thu, 8 Jul 2021 12:54:01 +0200
Subject: [PATCH lxcfs] delay check for swap accounting

Signed-off-by: Wolfgang Bumiller <w.bumiller@proxmox.com>
---
 src/bindings.c       | 20 ++++++++++----------
 src/bindings.h       |  2 +-
 src/cgroups/cgfsng.c | 13 ++++++++++---
 src/cgroups/cgroup.h |  2 +-
 src/proc_fuse.c      |  8 ++++++--
 5 files changed, 28 insertions(+), 17 deletions(-)

diff --git a/src/bindings.c b/src/bindings.c
index 6f395fb..b169af4 100644
--- a/src/bindings.c
+++ b/src/bindings.c
@@ -57,7 +57,8 @@
 #include "utils.h"
 
 static bool can_use_pidfd;
-static bool can_use_swap;
+static int can_use_swap = -1;
+struct cgroup_ops *cgroup_ops;
 
 static volatile sig_atomic_t reload_successful;
 
@@ -66,8 +67,15 @@ bool liblxcfs_functional(void)
 	return reload_successful != 0;
 }
 
-bool liblxcfs_can_use_swap(void)
+bool liblxcfs_can_use_swap(const char *cgroup)
 {
+	if (can_use_swap < 0) {
+		can_use_swap = cgroup_ops->can_use_swap(cgroup_ops, cgroup);
+		if (can_use_swap > 0)
+			lxcfs_info("Kernel supports swap accounting");
+		else if (can_use_swap == 0)
+			lxcfs_info("Kernel does not support swap accounting");
+	}
 	return can_use_swap;
 }
 
@@ -120,8 +128,6 @@ static void mutex_lock(pthread_mutex_t *l)
 		log_exit("%s - returned %d\n", strerror(ret), ret);
 }
 
-struct cgroup_ops *cgroup_ops;
-
 static void mutex_unlock(pthread_mutex_t *l)
 {
 	int ret;
@@ -892,12 +898,6 @@ static void __attribute__((constructor)) lxcfs_init(void)
 		lxcfs_info("Kernel supports pidfds");
 	}
 
-	can_use_swap = cgroup_ops->can_use_swap(cgroup_ops);
-	if (can_use_swap)
-		lxcfs_info("Kernel supports swap accounting");
-	else
-		lxcfs_info("Kernel does not support swap accounting");
-
 	lxcfs_info("api_extensions:");
 	for (i = 0; i < nr_api_extensions; i++)
 		lxcfs_info("- %s", api_extensions[i]);
diff --git a/src/bindings.h b/src/bindings.h
index e260902..a334947 100644
--- a/src/bindings.h
+++ b/src/bindings.h
@@ -91,7 +91,7 @@ extern pid_t lookup_initpid_in_store(pid_t qpid);
 extern void prune_init_slice(char *cg);
 extern bool supports_pidfd(void);
 extern bool liblxcfs_functional(void);
-extern bool liblxcfs_can_use_swap(void);
+extern bool liblxcfs_can_use_swap(const char *cgroup);
 
 static inline int install_signal_handler(int signo,
 					 void (*handler)(int, siginfo_t *, void *))
diff --git a/src/cgroups/cgfsng.c b/src/cgroups/cgfsng.c
index d772f25..8072017 100644
--- a/src/cgroups/cgfsng.c
+++ b/src/cgroups/cgfsng.c
@@ -632,7 +632,7 @@ static int cgfsng_get_memory_swap_max(struct cgroup_ops *ops,
 	return cgfsng_get_memory(ops, cgroup, "memory.swap.max", value);
 }
 
-static bool cgfsng_can_use_swap(struct cgroup_ops *ops)
+static bool cgfsng_can_use_swap(struct cgroup_ops *ops, const char *cgroup)
 {
 	bool has_swap = false;
 	struct hierarchy *h;
@@ -642,10 +642,17 @@ static bool cgfsng_can_use_swap(struct cgroup_ops *ops)
 		return false;
 
 	if (is_unified_hierarchy(h)) {
-		if (faccessat(h->fd, "memory.swap.max", F_OK, 0))
+		__do_free char *path = must_make_path_relative(cgroup, NULL);
+		__do_close int cgroup_fd = openat_safe(h->fd, path);
+		if (cgroup_fd < 0) {
+			lxcfs_error("failed to check for swap accounting, disabling");
+			return false;
+		}
+
+		if (faccessat(cgroup_fd, "memory.swap.max", F_OK, 0))
 			return false;
 
-		if (faccessat(h->fd, "memory.swap.current", F_OK, 0))
+		if (faccessat(cgroup_fd, "memory.swap.current", F_OK, 0))
 			return false;
 
 		has_swap = true;
diff --git a/src/cgroups/cgroup.h b/src/cgroups/cgroup.h
index f4b5d19..330f37c 100644
--- a/src/cgroups/cgroup.h
+++ b/src/cgroups/cgroup.h
@@ -155,7 +155,7 @@ struct cgroup_ops {
 			      char **value);
 	int (*get_memory_swap_max)(struct cgroup_ops *ops, const char *cgroup,
 				   char **value);
-	bool (*can_use_swap)(struct cgroup_ops *ops);
+	bool (*can_use_swap)(struct cgroup_ops *ops, const char *cgroup);
 
 	/* cpuset */
 	int (*get_cpuset_cpus)(struct cgroup_ops *ops, const char *cgroup,
diff --git a/src/proc_fuse.c b/src/proc_fuse.c
index 06ec2d9..9a5915c 100644
--- a/src/proc_fuse.c
+++ b/src/proc_fuse.c
@@ -322,7 +322,6 @@ static int proc_swaps_read(char *buf, size_t size, off_t offset,
 		 *memswusage_str = NULL, *memswpriority_str = NULL;
 	struct fuse_context *fc = fuse_get_context();
 	struct lxcfs_opts *opts = (struct lxcfs_opts *)fuse_get_context()->private_data;
-	bool wants_swap = opts && !opts->swap_off && liblxcfs_can_use_swap();
 	struct file_info *d = INTTYPE_TO_PTR(fi->fh);
 	uint64_t memswlimit = 0, memlimit = 0, memusage = 0, memswusage = 0,
 		 swtotal = 0, swusage = 0, memswpriority = 1,
@@ -330,6 +329,7 @@ static int proc_swaps_read(char *buf, size_t size, off_t offset,
 	ssize_t total_len = 0;
 	ssize_t l = 0;
 	char *cache = d->buf;
+	bool wants_swap;
 	int ret;
 	__do_free char *line = NULL;
 	__do_free void *fopen_cache = NULL;
@@ -359,6 +359,9 @@ static int proc_swaps_read(char *buf, size_t size, off_t offset,
 	cgroup = get_pid_cgroup(initpid, "memory");
 	if (!cgroup)
 		return read_file_fuse("/proc/swaps", buf, size, d);
+
+	wants_swap = opts && !opts->swap_off && liblxcfs_can_use_swap(cgroup);
+
 	prune_init_slice(cgroup);
 
 	memlimit = get_min_memlimit(cgroup, false);
@@ -1158,13 +1161,13 @@ static int proc_meminfo_read(char *buf, size_t size, off_t offset,
 	__do_fclose FILE *f = NULL;
 	struct fuse_context *fc = fuse_get_context();
 	struct lxcfs_opts *opts = (struct lxcfs_opts *)fuse_get_context()->private_data;
-	bool wants_swap = opts && !opts->swap_off && liblxcfs_can_use_swap();
 	struct file_info *d = INTTYPE_TO_PTR(fi->fh);
 	uint64_t memlimit = 0, memusage = 0, memswlimit = 0, memswusage = 0,
 		 hosttotal = 0, swfree = 0, swusage = 0, swtotal = 0,
 		 memswpriority = 1;
 	struct memory_stat mstat = {};
 	size_t linelen = 0, total_len = 0;
+	bool wants_swap;
 	char *cache = d->buf;
 	size_t cache_size = d->buflen;
 	int ret;
@@ -1192,6 +1195,7 @@ static int proc_meminfo_read(char *buf, size_t size, off_t offset,
 	cgroup = get_pid_cgroup(initpid, "memory");
 	if (!cgroup)
 		return read_file_fuse("/proc/meminfo", buf, size, d);
+	wants_swap = opts && !opts->swap_off && liblxcfs_can_use_swap(cgroup);
 
 	prune_init_slice(cgroup);
 
